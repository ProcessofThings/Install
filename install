#!/bin/bash
IPFSVER="v1.5.2"
USER="node"
HOME="/home"
HOMEPATH=$HOME"/"$USER"/"
FILE="ipfs-update_"$IPFSVER"_linux-amd64.tar.gz"
SERVICEHASH="QmV4Jdtfa1rSxKFxSKoj3bTNhbtK56dx4frUsjmuU1UPMg"
NODEKEY="WhHe893hh29haSAKhd9fhSJhksd92hkdfhksdgfshgdfkls"
POTSERVICEHASH="QmYFqNDmWbf9ajzxDpsqMrjcNAdUEa9RnyG41XBbDdMa36"
PERLVER="5.24.3"


## Install basic requirements (-y install without asking)
sudo apt-get -y install curl libperl-dev wget build-essential

if ! [ -x "$(command -v ipfs)" ]; then
   if ! [ -x "$(command -v ipfs-update)" ]; then
	wget https://dist.ipfs.io/ipfs-update/$IPFSVER/$FILE
	tar -zxvf $FILE
	cd ipfs-update
	sh install.sh
	cd ..
   else
	echo "IPFS Update Installed - Skipping"
   fi
fi

if ! [ -x "$(command -v ipfs)" ]; then
	echo "Installing IPFS" 
	ipfs-update install latest
else 
	echo "IPFS Installed - Skipping"
fi 

if ! id -u $USER > /dev/null 2>&1; then
    sudo adduser --disabled-login --q --gecos "" $USER	
else 
	echo "IPFS User Detected - Skipping"
fi

if ! [ -d "$HOME/$USER/.ipfs" ]; then
    echo "Init IPFS"
    su - $USER -c 'ipfs init'
else 
	echo "IPFS Already Initialsed - Skipping"
fi


if ! pgrep -x "ipfs" > /dev/null; then
	echo "Starting IPFS Daemon"
	su - $USER -c 'ipfs daemon > /dev/null 2>&1 &'
	sleep 3
	IPFSID=`pgrep -x "ipfs"`
else 
	echo "IPFS Already Running"
fi

if ! [ -f "/etc/systemd/system/ipfs.service" ]; then
	echo "Setting Up Service"
	su - $USER -c "ipfs swarm connect /ip4/134.119.187.154/tcp/4001/ipfs/Qma6Mp7Eubx4FqGA1Jq4BGuKpojoZ7HCaxt4m1hA7jPzoA"
	## Stores SERVICE file locally
	su - $USER -c "ipfs pin add $SERVICEHASH --progress"
	if ! [ -d "tmp" ]; then
		mkdir tmp
	fi
	if ! [ -f "tmp/ipfs.service" ]; then
		wget http://127.0.0.1:8080/ipfs/QmV4Jdtfa1rSxKFxSKoj3bTNhbtK56dx4frUsjmuU1UPMg/ipfs.service -P tmp/
	fi
	if [ -f "tmp/ipfs.service" ]; then
		sed -i "s/USERCHANGEME/$USER/g" tmp/ipfs.service
		cp tmp/ipfs.service /etc/systemd/system/ipfs.service
	fi
	rm -rf tmp/
fi

if [ $IPFSID > 0 ]; then 
   if pgrep -x "ipfs" > /dev/null; then
	echo "Stop IPFS daemon"
	kill -9 $IPFSID
	while pgrep -x "ipfs" > /dev/null; do sleep 1; done
   fi
fi

if ! pgrep -x "ipfs" > /dev/null; then
	systemctl daemon-reload
	echo "Enable IPFS on boot"
	systemctl enable ipfs.service
	echo "Starting IPFS Service"
	service ipfs start
	sleep 3
	echo "IPFS Started"
else 
	echo "IPFS Running"
fi

if ! [ -x "$(command -v multichaind)" ]; then
if ! [ -f "multichain-latest.tar.gz" ]; then
	echo "Pinning Blockchain"
	su - $USER -c "ipfs pin add QmYvVUXXrcLorqV7aq9nBeFZGgm1QXHhktWoez4ATzDJmS --progress"
	echo "Downloading Multichain"
	wget http://127.0.0.1:8080/ipfs/QmYvVUXXrcLorqV7aq9nBeFZGgm1QXHhktWoez4ATzDJmS/multichain-latest.tar.gz
	mkdir tmp
	tar -zxvf multichain-latest.tar.gz -C tmp --strip-components=1
	cd tmp
	mv * /usr/local/bin/
	cd ..
	rm -rf tmp/
	rm multichain-latest.tar.gz
fi
else 
	echo "Blockchain Installed"
fi


if ! [ -d "$HOME/$USER/perl5" ]; then
	echo "Setting Up Perlbrew"
	su - $USER -c "sed -i 's/\*)\sreturn;;/#&/g' .bashrc"
	su - $USER -c "curl -L https://install.perlbrew.pl | bash"
	su - $USER -c 'echo "source ~/perl5/perlbrew/etc/bashrc" >> ~/.bashrc'
	su - $USER -c 'perlbrew install perl-5.24.3 --thread --64int --64all'
else
	echo "Perlbrew Installed - Skipping"
fi

if ! [ -d "$HOME/$USER/perl5/perlbrew/perls/perl-$PERLVER" ]; then
	echo "Installing Perl $PERLVER"
	su - $USER -c "perlbrew install perl-$PERLVER --thread --64int --64all"
else
	echo "Perl $PERLVER Installed - Skipping"
fi


PERLINST=`su - $USER -c "perl -e 'print substr($^V, 1)'"`
if ! [ $PERLINST == $PERLVER ]; then
	echo "Switching Perl Verion $PERLVER" 
	su - $USER -c "perlbrew switch perl-$PERLVER"
else
	echo "Current Perl Version $PERLINST - Skipping"
fi

CPANM=`su - $USER -c "command -v cpanm"`
if ! [ -f "$CPANM" ]; then
	echo "Installing CPANM"
	su - $USER -c "curl -L https://cpanmin.us | perl - App::cpanminus"
else
	echo "cpanm Installed - Skipping"
fi

if ! [ -d "$HOME/$USER/log" ]; then
	echo "Create Log Folder"
	su - $USER -c "mkdir log"
else
	echo "log Folder Exists - Skipping"
fi

if ! [ -d "$HOME/$USER/run" ]; then
        echo "Create run Folder"
        su - $USER -c "mkdir run"
else
        echo "run Folder Exists - Skipping"
fi

if ! [ -f "/etc/systemd/system/pot_node.service" ]; then
	echo "Setup PoT Node Service"
	su - $USER -c "ipfs pin add $POTSERVICEHASH --progress"
        if ! [ -d "tmp" ]; then
                mkdir tmp
        fi
        if ! [ -f "tmp/pot_node.service" ]; then
                wget http://127.0.0.1:8080/ipfs/$POTSERVICEHASH/pot_node.service -P tmp/
        fi
        if [ -f "tmp/pot_node.service" ]; then
		WHICH=`su - $USER -c "command -v hypnotoad"`
		echo "Hypnotoad : $WHICH"
		sed -i "s|PATH|$HOMEPATH|g" tmp/pot_node.service
		sed -i "s|WHICH|$WHICH|g" tmp/pot_node.service
                cp tmp/pot_node.service /etc/systemd/system/pot_node.service
		systemctl --system daemon-reload
        fi
        rm -rf tmp/
else
	echo "PoT Node Sevice Installed - Skipping"
fi

if ! [ -d "$HOME/$USER/pot_node" ]; then
        echo "Installing PoT Node"
        su - $USER -c "git clone https://github.com/ProcessofThings/pot_node.git"
        su - $USER -c "cd pot_node; cpanm --installdeps ."
else
        echo "PoT Node Installed - Skipping"
fi

if ! [ -f "$HOME/$USER/run/pot_node.pid" ]; then
	echo "Starting PoT Node"
	service pot_node start
else 
	echo "PoT Node Running - Skipping"
fi
